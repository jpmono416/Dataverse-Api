using Dataverse_api.Entities;
using Dataverse_api.Util;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Query;

namespace Dataverse_api.Service;

/// <summary>
/// Class to interact with the Dataverse API for managing Accounts, Contacts, and Cases.
/// It uses the Early Bound classes generated by the CLI Pac tools.
/// It is the main class for interacting with the Dataverse API.
/// It makes use of templating to allow for the flexible creation, retrieval, updating, and deletion of entities.
/// </summary>
public static class EarlyBoundDataverseApiService
{
    private static readonly IOrganizationService Service = Utils.GetOrganizationService($"""
         AuthType=ClientSecret;
         SkipDiscovery=true;url={Utils.GetFromEnv("SCOPE")};
         Secret={Utils.GetFromEnv("SECRET_ID")};
         ClientId={Utils.GetFromEnv("APP_ID")};
         RequireNewInstance=true
         """);
    
    /// <summary>
    /// Creates a new entity of the specified type in Dataverse.
    /// </summary>
    /// <typeparam name="T">The type of the entity to create. Must inherit from <see cref="Entity"/>.</typeparam>
    /// <param name="entity">The entity to create.</param>
    /// <returns>The unique identifier (ID) of the created entity.</returns>
    public static Guid CreateEntity<T>(T entity) where T : Entity => Service.Create(entity);

    /// <summary>
    /// Retrieves an entity by its ID from Dataverse.
    /// </summary>
    /// <typeparam name="T">The type of the entity to retrieve. Must inherit from <see cref="Entity"/>.</typeparam>
    /// <param name="entityId">The unique identifier (ID) of the entity to retrieve.</param>
    /// <returns>The retrieved entity, cast to the specified type.</returns>
    public static T GetEntityById<T>(Guid entityId) where T : Entity => 
        Service.Retrieve(typeof(T).Name.ToLower(), entityId, new ColumnSet(true)).ToEntity<T>();

    /// <summary>
    /// Updates an existing entity in Dataverse using a custom update action.
    /// </summary>
    /// <typeparam name="T">The type of the entity to update. Must inherit from <see cref="Entity"/>.</typeparam>
    /// <param name="entity">The entity to update.</param>
    /// <param name="updateAction">The action to perform updates on the entity.</param>
    public static void UpdateEntity<T>(T entity, Action<T> updateAction) where T : Entity
    {
        updateAction(entity); // Apply specific updates via the delegate
        Service.Update(entity);
    }

    /// <summary>
    /// Deletes an entity from Dataverse by its ID.
    /// </summary>
    /// <typeparam name="T">The type of the entity to delete. Must inherit from <see cref="Entity"/>.</typeparam>
    /// <param name="entityId">The unique identifier (ID) of the entity to delete.</param>
    public static void DeleteEntity<T>(Guid entityId) where T : Entity => Service.Delete(typeof(T).Name.ToLower(), entityId);

}